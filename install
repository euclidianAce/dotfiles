#!/usr/bin/env lua

local function subEnvVar(str)
	return (str:gsub("%$([a-zA-Z_]+)", os.getenv))
end

local dotFileDir = subEnvVar("$HOME/dotfiles/")
local locations = "locations.txt"

local function runCmd(prefix, cmd)
	print(("%s\n\t`%s`"):format(prefix, cmd))
	local pipe, err = io.popen(cmd)
	if not pipe then
		return nil, err
	end
	local out = pipe:read("*a")
	pipe:close()
	return out
end

local files
if #arg > 0 then
	files = table.concat(arg, "\n")
else
	local fd = io.open(dotFileDir .. locations, "r")
	if not fd then
		io.stderr:write("Unable to open " .. locations)
		os.exit(1)
	end
	files = fd:read("*a")
	fd:close()
end

do
	local ok, err = runCmd("Compiling prompt", "zig build-exe prompt.zig -O ReleaseSafe")
	if not ok then
		io.stderr:write("Error compiling prompt: ", err, "\n")
		os.exit(1)
	end
end

do -- remove old links
	local fd = io.open(dotFileDir .. ".prev_locations.txt", "r")
	if fd then
		for loc in fd:lines() do
			runCmd("Removing old file " .. loc, "rm -rf " .. loc)
		end
		fd:close()
	end
end


local pat = "(%S+)%s+%-%>%s+(%S+)"
local last_paths = {}
for file, destDir in files:gmatch(pat) do
	destDir = subEnvVar(destDir)
	runCmd("Clearing destination " .. destDir .. file, "rm -rf " .. destDir .. file)
	last_paths[file] = destDir
	local cmd = "ln -s " .. dotFileDir .. file .. " " .. destDir .. file
	runCmd(("linking %s to %s"):format(dotFileDir .. file, destDir .. file), cmd)
end

do --save locations to remove next time incase locations change
	local fd = io.open(dotFileDir .. ".prev_locations.txt", "w")
	if not fd then
		os.exit(0)
	end
	for file, destDir in pairs(last_paths) do
		fd:write(destDir .. file .. "\n")
	end
	fd:close()
end
