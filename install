#!/usr/bin/env lua

local function subEnvVar(str)
	return (str:gsub("%$([a-zA-Z_]+)", os.getenv))
end

local dotFileDir = subEnvVar("$HOME/dotfiles/")
local locations = "locations.txt"

local files
if #arg > 0 then
	files = table.concat(arg, "\n")
else
	local fd = io.open(dotFileDir .. locations, "r")
	if not fd then
		io.stderr:write("Unable to open " .. locations)
		os.exit(1)
	end
	files = fd:read("a")
	fd:close()
end

local cc = os.getenv("CC")
if not cc then
	io.stderr:write("No c complier found ($CC is not defined)\n")
	os.exit(1)
end

print("Compiling ps1Getter.c")
do
	local pipe = io.popen(subEnvVar "$CC -O3 -o ps1 ps1Getter.c")
	pipe:read("*a")
	pipe:close()
end
do
	local pipe = io.popen(subEnvVar "$CC -O3 -o ps1-bash -DBASH ps1Getter.c")
	pipe:read("*a")
	pipe:close()
end

do -- remove old links
	local fd = io.open(dotFileDir .. ".prev_locations.txt", "r")
	if fd then
		for loc in fd:lines() do
			os.execute("rm -rf " .. loc)
		end
		fd:close()
	end
end

local pat = "(%S+)%s+%-%>%s+(%S+)"
local last_paths = {}
for file, destDir in files:gmatch(pat) do
	destDir = subEnvVar(destDir)
	os.execute("rm -rf " .. destDir .. file)
	last_paths[file] = destDir
	print(("linking %s to %s"):format(dotFileDir .. file, destDir .. file))
	local ok, res, code = os.execute("ln -s " .. dotFileDir .. file .. " " .. destDir .. file)
	if not ok then
		io.stderr:write("\tCould not link:\n\t\t", res, " ", code, "\n")
	end
end

do --save locations to remove next time incase locations change
	local fd = io.open(dotFileDir .. ".prev_locations.txt", "w")
	if not fd then
		os.exit(0)
	end
	for file, destDir in pairs(last_paths) do
		fd:write(destDir .. file .. "\n")
	end
	fd:close()
end
