#!/usr/bin/env bash
### A silly incremental build script
# Use environment variables to control compilation
# CC, TARGET, CFLAGS, LDFLAGS
set -e

log () {
	echo -n -e "\033[2mBuild: "
	echo -n $@
	echo -e "\033[0m"
}

logerr () {
	echo -n -e "\033[31;1;2mError\033[0m: " 1>&2
	echo $@ 1>&2
}

logwarn () {
	echo -n -e "\033[33;1;2m Warn\033[0m: " 1>&2
	echo $@ 1>&2
}

if [[ "$1" == "h" || "$1" == "help" || "$1" == "--help" || "$1" == "-h" || "$1" == "-help" ]]; then
	echo -e "$(basename $0): An incremental C build system for small, single executable projects"
	echo -e "  Usage $(basename $0) {run|clean|all|val|gdb|export|help} ..."
	echo -e "      run              Compile + run your compiled program"
	echo -e "      clean            Remove any generated objects"
	echo -e "      show             Print each command that would be invoked"
	echo -e "      all              Equivalent to clean + run"
	echo -e "      val              Like run, but use valgrind"
	echo -e "      gdb              Like run, but use gdb"
	echo -e "      export           Export a Makefile"
	echo -e "      h, help, -h"
	echo -e "      -help --help     Show this help and exit"
	echo -e ""
	echo -e "  Use environment variables to control build flags + targets"
	echo -e "      \$CC             The command to invoke the compiler [current: '$CC']"
	echo -e "      \$CFLAGS         Flags to pass to the compiler [current: '$CFLAGS']"
	echo -e "      \$LDFLAGS        Flags to pass to the linker [current: '$LDFLAGS']"
	echo -e "      \$TARGET         The name of the binary to produce [current: '$TARGET']"
	exit
fi


if [[ -z "$CC" ]]; then
	logerr "\$CC is not defined"
	exit 1
fi

if [[ -z "$CFLAGS" ]]; then
	CFLAGS="-Wall -Wextra"
	logwarn "\$CFLAGS is not defined, defaulting to '$CFLAGS'"
fi

if [[ -z "$LDFLAGS" ]]; then
	LDFLAGS=""
	logwarn "\$LDFLAGS is not defined, defaulting to '$LDFLAGS'"
fi

if [[ -z "$TARGET" ]]; then
	TARGET="out"
	logwarn "\$TARGET is not defined, defaulting to '$TARGET'"
fi

runCmd () {
	log "exec \`$@\`..."
	$@
}

runCmdShowExit () {
	runCmd $@
	if [[ "$?" == "0" ]]; then
		log -e "\033[32m\`$@\` exited with code $?\033[0m"
	else
		logerr -e "\033[31m\`$@\` exited with code $?\033[0m"
	fi
}

getSources () {
	find ./ -regex '\.\/.*.c' | cut -b 3- -
}

getObjects() {
	find ./ -regex '\.\/.*\.c\.o' | cut -b 3- - | awk 'gsub(/\//, "__") || 1'
}

toObjName() {
	echo ".$(echo $1 | awk 'gsub(/\//, "__") || 1').o"
}

getIncludes () {
	awk 'BEGIN { ORS=" " }; match($0, /^#\s*include\s*"(.*)"/, a) { print a[1] }' "$1"
}

getIncludesLines () {
	awk 'match($0, /^#\s*include\s*"(.*)"/, a) { print a[1] }' "$1"
}

forEachTouchedSrc() {
	local target="false"
	local objects=""
	for f in $(getSources); do
		local obj=$(toObjName $f)
		if (( $(date +%s -r $obj 2>/dev/null || echo 0) < $(date +%s -r $f) )); then
			target="true"
			$1 $CC -c $f -o $obj $CFLAGS
			objects="$objects $obj"
		fi
	done
	if [[ $target == "true" ]]; then
		$1 $CC $objects -o $TARGET $LDFLAGS
		return 0
	fi
	return 1
}

build () {
	forEachTouchedSrc "runCmdShowExit" || log "Nothing to compile"
}

genMakefile () {
	echo -e ".PHONY: run clean"
	echo
	echo "CC      := $CC"
	echo "CFLAGS  := $CFLAGS"
	echo "LDFLAGS := $LDFLAGS"
	echo
	echo    "TARGET  = $TARGET"
	echo -n "OBJECTS ="

	for f in $(getSources); do
		echo -n " $(toObjName $f)"
	done

	echo -e "\n"
	echo -e ".%.c.o: %.c"
	echo -e "\t\$(CC) -o \$@ -c \$< \$(LDFLAGS)"
	echo

	for f in $(getSources); do
		local obj=$(toObjName $f)
		local headers=$(getIncludes $f)
		echo -n -e "$obj: $f"
		if [[ -n "$headers" ]]; then
			echo -n " $headers"
		fi
		echo
	done

	echo
	echo -n "\$(TARGET): \$(OBJECTS)"
	echo -e "\n\t\$(CC) -o \$@ \$^ \$(LDFLAGS)"
	echo -e "\nrun: \$(TARGET)\n\t./\$(TARGET)"
	echo -n -e "\nclean:\n\trm -f \$(TARGET) \$(OBJECTS)"
	echo
}

clean () {
	local objs=$(getObjects)
	if [[ -n "$objs" ]]; then
		runCmd rm $objs
	fi
	runCmd rm -f ./$TARGET
}

case "$1" in
	"") build;;
	"clean") clean;;
	"all") clean; build;;
	"export") genMakefile;;
	"show")
		echo "Would run the following commands:"
		forEachTouchedSrc "echo"
		exit 0
		;;
	"run")
		build
		shift
		runCmdShowExit ./$TARGET $@
		;;
	"val")
		build
		shift
		runCmdShowExit valgrind $@ ./$TARGET
		;;
	"gdb")
		build
		shift
		runCmdShowExit gdb $@ ./$TARGET
		;;
	*)
		logerr "Unrecognized argument '$1'"
		exit 1
		;;
esac

# vim: ts=4 sw=4
